import re
from datetime import datetime, timedelta
from typing import Dict, Optional, List

def parse_schedule_text(text: str) -> Dict[str, str]:
    """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å"""
    schedule = {}
    lines = [line.strip() for line in text.split('\n') if line.strip()]
    
    day_mapping = {
        '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 'monday',
        '–≤—Ç–æ—Ä–Ω–∏–∫': 'tuesday',
        '—Å—Ä–µ–¥–∞': 'wednesday',
        '—á–µ—Ç–≤–µ—Ä–≥': 'thursday',
        '–ø—è—Ç–Ω–∏—Ü–∞': 'friday',
        '—Å—É–±–±–æ—Ç–∞': 'saturday',
        '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 'sunday'
    }
    
    for line in lines:
        if ':' not in line:
            continue
            
        day_part, time_part = line.split(':', 1)
        day = day_part.strip().lower()
        time = time_part.strip().lower()
        
        for ru_day, en_day in day_mapping.items():
            if ru_day in day:
                schedule[en_day] = time
                break
    
    return schedule

def validate_schedule(schedule: Dict[str, str]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    if not schedule:
        return False
        
    time_pattern = re.compile(
        r'^(\d{1,2})\s*-\s*(\d{1,2})$|'
        r'^(\d{1,2}:\d{2})\s*-\s*(\d{1,2}:\d{2})$|'
        r'^–≤—ã—Ö–æ–¥–Ω–æ–π$',
        re.IGNORECASE
    )
    
    for day, time in schedule.items():
        if not time_pattern.match(time.strip()):
            return False
            
    return True

def get_week_start_date(date: Optional[datetime.date] = None) -> datetime.date:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏"""
    if date is None:
        date = datetime.now().date()
    return date - timedelta(days=date.weekday())

def get_next_week_start_date() -> datetime.date:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏"""
    return get_week_start_date() + timedelta(days=7)

def get_day_of_week(date: Optional[datetime.date] = None) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"""
    if date is None:
        date = datetime.now().date()
    days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
    return days[date.weekday()]

def format_schedule_for_tomorrow(schedule_entries: List[Dict], day_name: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ"""
    result = f"üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_name.capitalize()}:</b>\n\n"
    
    for entry in schedule_entries:
        name = f"{entry['last_name']} {entry['first_name']}"
        time_range = entry.get(day_name, '–≤—ã—Ö–æ–¥–Ω–æ–π')
        
        if time_range.lower() == '–≤—ã—Ö–æ–¥–Ω–æ–π':
            result += f"üë§ {name}: <i>–≤—ã—Ö–æ–¥–Ω–æ–π</i>\n"
        else:
            result += f"üë§ {name}: {time_range}\n"
    
    return result
