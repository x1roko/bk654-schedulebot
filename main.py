import asyncio
import logging
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from config import Config
from database import Database
from keyboards import get_main_keyboard, get_week_choice_keyboard, get_day_choice_keyboard
from utils import parse_schedule_text, validate_schedule, get_week_start_date, get_next_week_start_date, get_day_of_week, format_schedule_for_tomorrow
from excel_generator import generate_week_schedule_excel, generate_day_schedule_excel
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=Config.BOT_TOKEN)
dp = Dispatcher()
db = Database()
scheduler = AsyncIOScheduler()

class Registration(StatesGroup):
    waiting_for_first_name = State()
    waiting_for_last_name = State()

class ScheduleInput(StatesGroup):
    waiting_for_schedule = State()

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==================

@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user = message.from_user
    
    if db.is_user_registered(user.id):
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {db.get_user_name(user.id)}!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(Registration.waiting_for_first_name)

@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "‚ÑπÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "üìù <b>–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b> - –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
        "üëÄ <b>–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞</b> - —É–≤–∏–¥–µ—Ç—å –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞\n"
        "üë• <b>–û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b> - —Å–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Å—Ä–µ–¥—É —É—Ç—Ä–æ–º."
    )
    await message.answer(help_text, reply_markup=get_main_keyboard(), parse_mode="HTML")

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö ==================

@dp.message(F.text.in_(["üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–∑–∞–ø–æ–ª–Ω–∏—Ç—å"]))
async def cmd_fill_schedule(message: Message, state: FSMContext):
    if not db.is_user_registered(message.from_user.id):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    await message.answer(
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:</b>\n\n"
        "<i>–§–æ—Ä–º–∞—Ç:</i>\n"
        "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: 9-18\n"
        "–≤—Ç–æ—Ä–Ω–∏–∫: 10-19\n"
        "—Å—Ä–µ–¥–∞: –≤—ã—Ö–æ–¥–Ω–æ–π\n"
        "—á–µ—Ç–≤–µ—Ä–≥: 11-21\n"
        "–ø—è—Ç–Ω–∏—Ü–∞: 9-18\n"
        "—Å—É–±–±–æ—Ç–∞: –≤—ã—Ö–æ–¥–Ω–æ–π\n"
        "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: –≤—ã—Ö–æ–¥–Ω–æ–π\n\n"
        "–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –∫–∞–∫ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π, —Ç–∞–∫ –∏ –ø–æ –¥–Ω—è–º:",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML"
    )
    await state.set_state(ScheduleInput.waiting_for_schedule)

@dp.message(F.text.in_(["üëÄ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–º–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"]))
async def cmd_my_schedule(message: Message):
    if not db.is_user_registered(message.from_user.id):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_week_choice_keyboard()
    )

@dp.message(F.text.in_(["üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", "–∑–∞–≤—Ç—Ä–∞"]))
async def cmd_tomorrow_schedule(message: Message):
    if not db.is_user_registered(message.from_user.id):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    tomorrow = datetime.now() + timedelta(days=1)
    day_name = get_day_of_week(tomorrow.date())
    week_start = get_week_start_date(tomorrow.date())
    
    schedule_entries = db.get_week_schedule(week_start)
    formatted_schedule = format_schedule_for_tomorrow(schedule_entries, day_name)
    
    await message.answer(formatted_schedule)

@dp.message(F.text.in_(["üë• –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–æ–±—â–µ–µ"]))
async def cmd_full_schedule(message: Message):
    if not db.is_user_registered(message.from_user.id):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_week_choice_keyboard()
    )

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–°–¢–û–Ø–ù–ò–ô ==================

@dp.message(Registration.waiting_for_first_name)
async def process_first_name(message: Message, state: FSMContext):
    if len(message.text) > 50:
        await message.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(first_name=message.text.strip())
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(Registration.waiting_for_last_name)

@dp.message(Registration.waiting_for_last_name)
async def process_last_name(message: Message, state: FSMContext):
    if len(message.text) > 50:
        await message.answer("–§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    user_data = await state.get_data()
    first_name = user_data['first_name']
    last_name = message.text.strip()
    
    if db.register_user(message.from_user.id, first_name, last_name):
        logger.info(f"New user registered: {last_name} {first_name} (ID: {message.from_user.id})")
        await message.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {last_name} {first_name}!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.",
            reply_markup=get_main_keyboard()
        )
    else:
        logger.error(f"Failed to register user: {message.from_user.id}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=ReplyKeyboardRemove()
        )
    
    await state.clear()

@dp.message(ScheduleInput.waiting_for_schedule)
async def process_schedule_input(message: Message, state: FSMContext):
    try:
        schedule_data = parse_schedule_text(message.text)
        
        if len(schedule_data) < 7:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏.")
            return
            
        if not validate_schedule(schedule_data):
            await message.answer(
                "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "<i>–¥–µ–Ω—å: –≤—Ä–µ–º—è</i> (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: 9-18)\n"
                "–∏–ª–∏ '–≤—ã—Ö–æ–¥–Ω–æ–π'\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=ReplyKeyboardRemove(),
                parse_mode="HTML"
            )
            return
        
        next_week_start = get_next_week_start_date()
        if db.save_schedule(message.from_user.id, next_week_start, schedule_data):
            logger.info(f"Schedule saved for user: {message.from_user.id}")
            await message.answer(
                "‚úÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</b>",
                reply_markup=get_main_keyboard(),
                parse_mode="HTML"
            )
        else:
            logger.error(f"Failed to save schedule for user: {message.from_user.id}")
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_keyboard()
        )
    finally:
        await state.clear()

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK ==================

@dp.callback_query(F.data.in_(['current_week', 'next_week']))
async def process_week_choice(callback: CallbackQuery):
    if not db.is_user_registered(callback.from_user.id):
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    if callback.data == 'current_week':
        week_start = get_week_start_date()
        week_name = "—Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é"
    else:
        week_start = get_next_week_start_date()
        week_name = "—Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é"
    
    schedule_data = db.get_week_schedule(week_start)
    if not schedule_data:
        await callback.message.answer(f"–ù–∞ {week_name} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ.")
        await callback.answer()
        return
    
    try:
        filename = generate_week_schedule_excel(schedule_data, week_start)
        
        await callback.message.answer_document(
            FSInputFile(filename, filename=f"schedule_{week_start}.xlsx"),
            caption=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {week_name}"
        )
        os.remove(filename)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await callback.message.answer(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {week_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    await callback.answer()

@dp.callback_query(F.data.startswith('day_'))
async def process_day_choice(callback: CallbackQuery):
    day = callback.data.split('_')[1]
    today = datetime.now().date()
    week_start = get_week_start_date(today)
    
    schedule_entries = db.get_week_schedule(week_start)
    
    try:
        filename = generate_day_schedule_excel(schedule_entries, day)
        
        await callback.message.answer_document(
            FSInputFile(filename, filename=f"schedule_{day}.xlsx"),
            caption=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}"
        )
        os.remove(filename)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await callback.message.answer(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    await callback.answer()

# ================== –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò ==================

async def send_schedule_reminder():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    users = db.get_all_users()
    for user in users:
        try:
            await bot.send_message(
                user['user_id'],
                "‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' –≤ –º–µ–Ω—é.",
                reply_markup=get_main_keyboard(),
                parse_mode="HTML"
            )
            logger.info(f"Reminder sent to user: {user['user_id']}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")

async def send_daily_schedule():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    tomorrow = datetime.now() + timedelta(days=1)
    day_name = get_day_of_week(tomorrow.date())
    week_start = get_week_start_date(tomorrow.date())
    
    schedule_entries = db.get_week_schedule(week_start)
    formatted_schedule = format_schedule_for_tomorrow(schedule_entries, day_name)
    
    users = db.get_all_users()
    for user in users:
        try:
            await bot.send_message(
                user['user_id'],
                formatted_schedule
            )
            logger.info(f"Daily schedule sent to user: {user['user_id']}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")

async def on_startup():
    scheduler.add_job(send_schedule_reminder, 'cron', day_of_week='wed', hour=10)
    scheduler.add_job(send_daily_schedule, 'cron', hour=18)
    scheduler.start()
    logger.info("Bot and scheduler started")

async def on_shutdown():
    scheduler.shutdown()
    db.close()
    logger.info("Bot and scheduler stopped")

async def main():
    await on_startup()
    try:
        await dp.start_polling(bot)
    finally:
        await on_shutdown()

if __name__ == "__main__":
    asyncio.run(main())
